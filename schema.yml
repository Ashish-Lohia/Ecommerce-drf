openapi: 3.0.3
info:
  title: Ecommerce API
  version: 1.0.0
  description: An Ecommerce Platform
paths:
  /api/addresses/:
    get:
      operationId: addresses_list
      tags:
      - addresses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
          description: ''
    post:
      operationId: addresses_create
      tags:
      - addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
  /api/addresses/{id}/:
    get:
      operationId: addresses_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - addresses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    put:
      operationId: addresses_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    patch:
      operationId: addresses_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - addresses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    delete:
      operationId: addresses_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - addresses
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/brand-categories/:
    get:
      operationId: brand_categories_list
      parameters:
      - in: query
        name: brand
        schema:
          type: string
          format: uuid
      - in: query
        name: category
        schema:
          type: string
          format: uuid
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - brand-categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrandCategoryDetail'
          description: ''
    post:
      operationId: brand_categories_create
      tags:
      - brand-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandCategory'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCategory'
          description: ''
  /api/brand-categories/{id}/:
    get:
      operationId: brand_categories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Brand_Category_Pair.
        required: true
      tags:
      - brand-categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCategoryDetail'
          description: ''
    put:
      operationId: brand_categories_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Brand_Category_Pair.
        required: true
      tags:
      - brand-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandCategory'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCategory'
          description: ''
    patch:
      operationId: brand_categories_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Brand_Category_Pair.
        required: true
      tags:
      - brand-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBrandCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBrandCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBrandCategory'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCategory'
          description: ''
    delete:
      operationId: brand_categories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Brand_Category_Pair.
        required: true
      tags:
      - brand-categories
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/brand-categories/bulk_create/:
    post:
      operationId: brand_categories_bulk_create_create
      tags:
      - brand-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrandCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BrandCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BrandCategory'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCategory'
          description: ''
  /api/brand-categories/stats/:
    get:
      operationId: brand_categories_stats_retrieve
      tags:
      - brand-categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandCategory'
          description: ''
  /api/brands/:
    get:
      operationId: brands_list
      description: Override list method to format response
      parameters:
      - in: query
        name: category
        schema:
          type: string
      - in: query
        name: has_categories
        schema:
          type: boolean
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - brands
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrandList'
          description: ''
    post:
      operationId: brands_create
      description: Override create method to format response
      tags:
      - brands
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Brand'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Brand'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
          description: ''
  /api/brands/{id}/:
    get:
      operationId: brands_retrieve
      description: Override retrieve method to format response
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - brands
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
          description: ''
    put:
      operationId: brands_update
      description: Override update method to format response
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - brands
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Brand'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Brand'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
          description: ''
    patch:
      operationId: brands_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - brands
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBrand'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBrand'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBrand'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
          description: ''
    delete:
      operationId: brands_destroy
      description: Override destroy method to format response
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - brands
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/brands/{id}/add_category/:
    post:
      operationId: brands_add_category_create
      description: Add a category to this brand
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - brands
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Brand'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Brand'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Brand'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
          description: ''
  /api/brands/{id}/categories/:
    get:
      operationId: brands_categories_retrieve
      description: Get all categories associated with this brand
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - brands
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
          description: ''
  /api/brands/{id}/remove_category/:
    delete:
      operationId: brands_remove_category_destroy
      description: Remove a category from this brand
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - brands
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/brands/{id}/sizes/:
    get:
      operationId: brands_sizes_retrieve
      description: Get all sizes for this brand
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this brand.
        required: true
      tags:
      - brands
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Brand'
          description: ''
  /api/cart/:
    get:
      operationId: cart_list
      tags:
      - cart
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
          description: ''
    post:
      operationId: cart_create
      tags:
      - cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
  /api/cart-items/:
    get:
      operationId: cart_items_list
      tags:
      - cart-items
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
          description: ''
    post:
      operationId: cart_items_create
      tags:
      - cart-items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
  /api/cart-items/{id}/:
    get:
      operationId: cart_items_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - cart-items
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    put:
      operationId: cart_items_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - cart-items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    patch:
      operationId: cart_items_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - cart-items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
    delete:
      operationId: cart_items_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - cart-items
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/cart/{id}/:
    get:
      operationId: cart_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - cart
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    put:
      operationId: cart_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    patch:
      operationId: cart_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCart'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    delete:
      operationId: cart_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - cart
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/categories/:
    get:
      operationId: categories_list
      description: List all categories with formatted response
      parameters:
      - in: query
        name: has_brands
        schema:
          type: boolean
      - in: query
        name: has_children
        schema:
          type: boolean
      - in: query
        name: has_parent
        schema:
          type: boolean
      - in: query
        name: level
        schema:
          type: number
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: parent
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      tags:
      - categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryList'
          description: ''
    post:
      operationId: categories_create
      description: Create a new category with formatted response
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{id}/:
    get:
      operationId: categories_retrieve
      description: Retrieve a single category with formatted response
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: categories_update
      description: Update a category with formatted response
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: categories_partial_update
      description: Partially update a category with formatted response
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: categories_destroy
      description: Delete a category with formatted response
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - categories
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/categories/{id}/brands/:
    get:
      operationId: categories_brands_retrieve
      description: Get all brands associated with this category
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{id}/children/:
    get:
      operationId: categories_children_retrieve
      description: Get all direct children of a category
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{id}/sizes/:
    get:
      operationId: categories_sizes_retrieve
      description: Get all sizes for this category
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/root_categories/:
    get:
      operationId: categories_root_categories_retrieve
      description: Get all root categories (categories with no parent)
      tags:
      - categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/tree/:
    get:
      operationId: categories_tree_retrieve
      description: Get the complete category tree structure
      tags:
      - categories
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/coupons/:
    get:
      operationId: coupons_list
      tags:
      - coupons
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coupon'
          description: ''
    post:
      operationId: coupons_create
      tags:
      - coupons
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Coupon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Coupon'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
  /api/coupons/{id}/:
    get:
      operationId: coupons_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this coupon.
        required: true
      tags:
      - coupons
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
    put:
      operationId: coupons_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this coupon.
        required: true
      tags:
      - coupons
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Coupon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Coupon'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
    patch:
      operationId: coupons_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this coupon.
        required: true
      tags:
      - coupons
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCoupon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCoupon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCoupon'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
    delete:
      operationId: coupons_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this coupon.
        required: true
      tags:
      - coupons
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/coupons/active/:
    get:
      operationId: coupons_active_retrieve
      description: List active and valid coupons for user
      tags:
      - coupons
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
  /api/deliveries/:
    get:
      operationId: deliveries_list
      parameters:
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: order
        schema:
          type: string
          format: uuid
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: provider
        schema:
          type: string
          enum:
          - delhivery
          - xpressbees
        description: |-
          * `delhivery` - Delhivery
          * `xpressbees` - Xpressbees
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - cancelled
          - delivered
          - in_transit
          - picked_up
          - pickup_scheduled
        description: |-
          * `pickup_scheduled` - Pickup Scheduled
          * `picked_up` - Picked Up
          * `in_transit` - In Transit
          * `delivered` - Delivered
          * `cancelled` - Cancelled
      tags:
      - deliveries
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryList'
          description: ''
    post:
      operationId: deliveries_create
      tags:
      - deliveries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Delivery'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Delivery'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
          description: ''
  /api/deliveries/{id}/:
    get:
      operationId: deliveries_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this delivery.
        required: true
      tags:
      - deliveries
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
          description: ''
    put:
      operationId: deliveries_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this delivery.
        required: true
      tags:
      - deliveries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Delivery'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Delivery'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
          description: ''
    patch:
      operationId: deliveries_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this delivery.
        required: true
      tags:
      - deliveries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDelivery'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDelivery'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDelivery'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
          description: ''
    delete:
      operationId: deliveries_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this delivery.
        required: true
      tags:
      - deliveries
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/deliveries/{id}/change-status/:
    patch:
      operationId: deliveries_change_status_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this delivery.
        required: true
      tags:
      - deliveries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDelivery'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDelivery'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDelivery'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
          description: ''
  /api/dispute-media/:
    get:
      operationId: dispute_media_list
      parameters:
      - in: query
        name: dispute
        schema:
          type: string
          format: uuid
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
          enum:
          - image
          - video
        description: |-
          * `image` - Image
          * `video` - Video
      tags:
      - dispute-media
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DisputeMedia'
          description: ''
    post:
      operationId: dispute_media_create
      tags:
      - dispute-media
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisputeMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DisputeMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DisputeMedia'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeMedia'
          description: ''
  /api/dispute-media/{id}/:
    get:
      operationId: dispute_media_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute media.
        required: true
      tags:
      - dispute-media
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeMedia'
          description: ''
    put:
      operationId: dispute_media_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute media.
        required: true
      tags:
      - dispute-media
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisputeMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DisputeMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DisputeMedia'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeMedia'
          description: ''
    patch:
      operationId: dispute_media_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute media.
        required: true
      tags:
      - dispute-media
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDisputeMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDisputeMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDisputeMedia'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeMedia'
          description: ''
    delete:
      operationId: dispute_media_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute media.
        required: true
      tags:
      - dispute-media
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/disputes/:
    get:
      operationId: disputes_list
      parameters:
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: order
        schema:
          type: string
          format: uuid
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - cancelled
          - created
          - pending
          - rejected
          - resolved
        description: |-
          * `created` - Created
          * `pending` - Pending
          * `resolved` - Resolved
          * `rejected` - Rejected
          * `cancelled` - Cancelled
      - in: query
        name: user
        schema:
          type: string
          format: uuid
      tags:
      - disputes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dispute'
          description: ''
    post:
      operationId: disputes_create
      tags:
      - disputes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dispute'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Dispute'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Dispute'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: ''
  /api/disputes/{id}/:
    get:
      operationId: disputes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute.
        required: true
      tags:
      - disputes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: ''
    put:
      operationId: disputes_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute.
        required: true
      tags:
      - disputes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dispute'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Dispute'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Dispute'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: ''
    patch:
      operationId: disputes_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute.
        required: true
      tags:
      - disputes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDispute'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDispute'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDispute'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: ''
    delete:
      operationId: disputes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute.
        required: true
      tags:
      - disputes
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/disputes/{id}/resolve/:
    patch:
      operationId: disputes_resolve_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this dispute.
        required: true
      tags:
      - disputes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDispute'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDispute'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDispute'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
          description: ''
  /api/my-coupons/:
    get:
      operationId: my_coupons_list
      tags:
      - my-coupons
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CouponUser'
          description: ''
  /api/my-coupons/{id}/:
    get:
      operationId: my_coupons_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - my-coupons
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponUser'
          description: ''
  /api/my-coupons/use_coupon/:
    post:
      operationId: my_coupons_use_coupon_create
      description: Mark coupon as used by user
      tags:
      - my-coupons
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CouponUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CouponUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponUser'
          description: ''
  /api/notifications/:
    get:
      operationId: notifications_retrieve
      description: Get user notifications with pagination
      tags:
      - notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/notifications/{notification_id}/read/:
    post:
      operationId: notifications_read_create
      description: Mark notification as read
      parameters:
      - in: path
        name: notification_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/notifications/unread_count/:
    get:
      operationId: notifications_unread_count_retrieve
      description: Get unread notifications count
      tags:
      - notifications
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/orders/:
    get:
      operationId: orders_list
      parameters:
      - in: query
        name: buyer
        schema:
          type: string
          format: uuid
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: seller
        schema:
          type: string
          format: uuid
      - in: query
        name: status
        schema:
          type: string
          enum:
          - cancelled
          - completed
          - confirmed
          - created
          - delivered
          - in_transit
          - picked_up
          - pickup_scheduled
        description: |-
          * `created` - Created
          * `confirmed` - Confirmed
          * `pickup_scheduled` - Pickup Scheduled
          * `picked_up` - Picked Up
          * `in_transit` - In Transit
          * `delivered` - Delivered
          * `completed` - Completed
          * `cancelled` - Cancelled
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: orders_create
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/orders/{id}/:
    get:
      operationId: orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: orders_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: orders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/orders/{id}/change-status/:
    patch:
      operationId: orders_change_status_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/products/:
    get:
      operationId: products_list
      parameters:
      - in: query
        name: brand
        schema:
          type: string
      - in: query
        name: category
        schema:
          type: string
      - in: query
        name: is_archived
        schema:
          type: boolean
      - in: query
        name: max_price
        schema:
          type: number
      - in: query
        name: min_price
        schema:
          type: number
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: size
        schema:
          type: string
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductList'
          description: ''
    post:
      operationId: products_create
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{id}/:
    get:
      operationId: products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
    put:
      operationId: products_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: products_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/review-media/:
    get:
      operationId: review_media_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: review
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
          enum:
          - image
          - video
        description: |-
          * `image` - Image
          * `video` - Video
      tags:
      - review-media
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewMedia'
          description: ''
    post:
      operationId: review_media_create
      tags:
      - review-media
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewMedia'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewMedia'
          description: ''
  /api/review-media/{id}/:
    get:
      operationId: review_media_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review Media.
        required: true
      tags:
      - review-media
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewMedia'
          description: ''
    put:
      operationId: review_media_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review Media.
        required: true
      tags:
      - review-media
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewMedia'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewMedia'
          description: ''
    patch:
      operationId: review_media_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review Media.
        required: true
      tags:
      - review-media
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewMedia'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewMedia'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewMedia'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewMedia'
          description: ''
    delete:
      operationId: review_media_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review Media.
        required: true
      tags:
      - review-media
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/reviews/:
    get:
      operationId: reviews_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: product
        schema:
          type: string
          format: uuid
      - in: query
        name: rating
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: string
          format: uuid
      tags:
      - reviews
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
          description: ''
    post:
      operationId: reviews_create
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/reviews/{id}/:
    get:
      operationId: reviews_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: reviews_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: reviews_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: reviews_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/sizes/:
    get:
      operationId: sizes_list
      description: List all sizes with pagination and filtering
      parameters:
      - in: query
        name: brand
        schema:
          type: string
          format: uuid
      - in: query
        name: brand_name
        schema:
          type: string
      - in: query
        name: category
        schema:
          type: string
          format: uuid
      - in: query
        name: category_name
        schema:
          type: string
      - in: query
        name: category_slug
        schema:
          type: string
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - sizes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SizeList'
          description: ''
    post:
      operationId: sizes_create
      description: Create a new size (Admin only)
      tags:
      - sizes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Size'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Size'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Size'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Size'
          description: ''
  /api/sizes/{id}/:
    get:
      operationId: sizes_retrieve
      description: Retrieve a specific size
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this size.
        required: true
      tags:
      - sizes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SizeDetail'
          description: ''
    put:
      operationId: sizes_update
      description: Update a size (Admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this size.
        required: true
      tags:
      - sizes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Size'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Size'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Size'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Size'
          description: ''
    patch:
      operationId: sizes_partial_update
      description: Partially update a size (Admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this size.
        required: true
      tags:
      - sizes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSize'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSize'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSize'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Size'
          description: ''
    delete:
      operationId: sizes_destroy
      description: Delete a size (Admin only)
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this size.
        required: true
      tags:
      - sizes
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/sizes/bulk_create/:
    post:
      operationId: sizes_bulk_create_create
      description: Create multiple sizes at once (Admin only)
      tags:
      - sizes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Size'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Size'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Size'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Size'
          description: ''
  /api/sizes/by_brand_category/:
    get:
      operationId: sizes_by_brand_category_retrieve
      description: Get sizes filtered by brand and category
      tags:
      - sizes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Size'
          description: ''
  /api/sizes/duplicate_names/:
    get:
      operationId: sizes_duplicate_names_retrieve
      tags:
      - sizes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Size'
          description: ''
  /api/sizes/stats/:
    get:
      operationId: sizes_stats_retrieve
      description: Get statistics about sizes
      tags:
      - sizes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Size'
          description: ''
  /api/transactions/:
    get:
      operationId: transactions_list
      parameters:
      - in: query
        name: order
        schema:
          type: string
          format: uuid
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: provider
        schema:
          type: string
          enum:
          - razorpay
          - stripe
        description: |-
          * `razorpay` - Razorpay
          * `stripe` - Stripe
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - cancelled
          - failed
          - pending
          - success
        description: |-
          * `pending` - Pending
          * `success` - Success
          * `failed` - Failed
          * `cancelled` - Cancelled
      tags:
      - transactions
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
          description: ''
    post:
      operationId: transactions_create
      tags:
      - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
  /api/transactions/{id}/:
    get:
      operationId: transactions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this transaction.
        required: true
      tags:
      - transactions
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    put:
      operationId: transactions_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this transaction.
        required: true
      tags:
      - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    patch:
      operationId: transactions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this transaction.
        required: true
      tags:
      - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    delete:
      operationId: transactions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this transaction.
        required: true
      tags:
      - transactions
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/user/all/:
    get:
      operationId: user_all_list
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllUserProfile'
          description: ''
  /api/user/edit/profile/:
    post:
      operationId: user_edit_profile_create
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/user/login/:
    post:
      operationId: user_login_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
          description: ''
  /api/user/logout/:
    post:
      operationId: user_logout_create
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/user/other/{id}/:
    get:
      operationId: user_other_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - user
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/user/profile/:
    get:
      operationId: user_profile_retrieve
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/user/register/:
    post:
      operationId: user_register_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/user/role/{id}/:
    post:
      operationId: user_role_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/user/token/refresh/:
    post:
      operationId: user_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
          readOnly: true
        address_line:
          type: string
        landmark:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 50
        state:
          type: string
          maxLength: 50
        country:
          type: string
          maxLength: 100
        pin_code:
          type: string
          maxLength: 10
        full_address:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - address_line
      - city
      - country
      - created_at
      - full_address
      - id
      - pin_code
      - state
      - updated_at
      - user
    AllUserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        password:
          type: string
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        fullname:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        phoneNo:
          type: string
          nullable: true
          maxLength: 10
        profilePic:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        is_active:
          type: boolean
        is_staff:
          type: boolean
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - created_at
      - email
      - fullname
      - id
      - password
      - updated_at
    Brand:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        logo:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        categories:
          type: string
          readOnly: true
        sizes_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - categories
      - created_at
      - id
      - name
      - sizes_count
      - updated_at
    BrandCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        brand:
          type: string
          format: uuid
        category:
          type: string
          format: uuid
        brand_name:
          type: string
          readOnly: true
        category_name:
          type: string
          readOnly: true
        category_slug:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - brand
      - brand_name
      - category
      - category_name
      - category_slug
      - created_at
      - id
      - updated_at
    BrandCategoryDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        brand:
          allOf:
          - $ref: '#/components/schemas/BrandList'
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryList'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - brand
      - category
      - created_at
      - id
      - updated_at
    BrandList:
      type: object
      description: Simplified serializer for listing brands without nested categories
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        logo:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        categories_count:
          type: string
          readOnly: true
        sizes_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - categories_count
      - created_at
      - id
      - name
      - sizes_count
      - updated_at
    Cart:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        owner:
          type: string
          format: uuid
          readOnly: true
        cart_items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
        total_items:
          type: string
          readOnly: true
        total_price:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - cart_items
      - created_at
      - id
      - owner
      - total_items
      - total_price
      - updated_at
    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/ProductList'
          readOnly: true
        product_id:
          type: string
          format: uuid
          writeOnly: true
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - product
      - product_id
      - quantity
      - updated_at
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        parent:
          type: string
          format: uuid
          nullable: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        children:
          type: string
          readOnly: true
        ancestor_names:
          type: string
          readOnly: true
        sizes_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - ancestor_names
      - children
      - created_at
      - id
      - name
      - sizes_count
      - slug
      - updated_at
    CategoryList:
      type: object
      description: Simplified serializer for listing categories without nested children
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        parent:
          type: string
          format: uuid
          nullable: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        ancestor_names:
          type: string
          readOnly: true
        children_count:
          type: string
          readOnly: true
        sizes_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - ancestor_names
      - children_count
      - created_at
      - id
      - name
      - sizes_count
      - slug
      - updated_at
    Coupon:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 30
        type:
          $ref: '#/components/schemas/CouponTypeEnum'
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        max_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        min_order_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        valid_from:
          type: string
          format: date-time
        valid_to:
          type: string
          format: date-time
        is_active:
          type: boolean
        max_use:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        used_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - code
      - created_at
      - id
      - updated_at
      - used_count
      - valid_from
      - valid_to
      - value
    CouponTypeEnum:
      enum:
      - percentage
      - flat
      type: string
      description: |-
        * `percentage` - Percentage
        * `flat` - Flat
    CouponUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        coupon:
          type: string
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        used_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - coupon
      - id
      - used_at
      - user
    Delivery:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        provider:
          $ref: '#/components/schemas/Provider05eEnum'
        tracking_id:
          type: string
          nullable: true
          maxLength: 100
        tracking_website:
          type: string
          format: uri
          maxLength: 200
        shipping_label:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        status:
          $ref: '#/components/schemas/Status842Enum'
        estimated_delivery_date:
          type: string
          format: date-time
          nullable: true
        confirmed_at:
          type: string
          format: date
          nullable: true
        order:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - id
      - updated_at
    DeliveryList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        order_id:
          type: string
          format: uuid
          readOnly: true
        provider:
          $ref: '#/components/schemas/Provider05eEnum'
        tracking_id:
          type: string
          nullable: true
          maxLength: 100
        status:
          $ref: '#/components/schemas/Status842Enum'
        estimated_delivery_date:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - order_id
    Dispute:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
          readOnly: true
        order:
          type: string
          format: uuid
        content:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/DisputeStatusEnum'
          readOnly: true
        result:
          type: string
          readOnly: true
          nullable: true
        multimedia:
          type: array
          items:
            $ref: '#/components/schemas/DisputeMedia'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created_at
      - id
      - multimedia
      - order
      - result
      - status
      - updated_at
      - user
    DisputeMedia:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        dispute:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/Type34bEnum'
        url:
          type: string
          format: uri
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - dispute
      - id
      - updated_at
      - url
    DisputeStatusEnum:
      enum:
      - created
      - pending
      - resolved
      - rejected
      - cancelled
      type: string
      description: |-
        * `created` - Created
        * `pending` - Pending
        * `resolved` - Resolved
        * `rejected` - Rejected
        * `cancelled` - Cancelled
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        buyer:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        seller:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        base_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        convenience_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        delivery_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        discount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          allOf:
          - $ref: '#/components/schemas/OrderStatusEnum'
          readOnly: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        coupons:
          allOf:
          - $ref: '#/components/schemas/Coupon'
          readOnly: true
        coupons_id:
          type: string
          format: uuid
          writeOnly: true
          nullable: true
        invoice:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          writeOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - base_amount
      - buyer
      - convenience_fee
      - coupons
      - created_at
      - delivery_fee
      - id
      - items
      - order_items
      - seller
      - status
      - total_amount
      - updated_at
    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/ProductList'
          readOnly: true
        product_id:
          type: string
          format: uuid
          writeOnly: true
        price_at_order:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - id
      - price_at_order
      - product
      - product_id
      - quantity
    OrderStatusEnum:
      enum:
      - created
      - confirmed
      - pickup_scheduled
      - picked_up
      - in_transit
      - delivered
      - completed
      - cancelled
      type: string
      description: |-
        * `created` - Created
        * `confirmed` - Confirmed
        * `pickup_scheduled` - Pickup Scheduled
        * `picked_up` - Picked Up
        * `in_transit` - In Transit
        * `delivered` - Delivered
        * `completed` - Completed
        * `cancelled` - Cancelled
    PatchedAddress:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
          readOnly: true
        address_line:
          type: string
        landmark:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 50
        state:
          type: string
          maxLength: 50
        country:
          type: string
          maxLength: 100
        pin_code:
          type: string
          maxLength: 10
        full_address:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBrand:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        logo:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        categories:
          type: string
          readOnly: true
        sizes_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedBrandCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        brand:
          type: string
          format: uuid
        category:
          type: string
          format: uuid
        brand_name:
          type: string
          readOnly: true
        category_name:
          type: string
          readOnly: true
        category_slug:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedCart:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        owner:
          type: string
          format: uuid
          readOnly: true
        cart_items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
        total_items:
          type: string
          readOnly: true
        total_price:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedCartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/ProductList'
          readOnly: true
        product_id:
          type: string
          format: uuid
          writeOnly: true
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 50
        parent:
          type: string
          format: uuid
          nullable: true
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        children:
          type: string
          readOnly: true
        ancestor_names:
          type: string
          readOnly: true
        sizes_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedCoupon:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          maxLength: 30
        type:
          $ref: '#/components/schemas/CouponTypeEnum'
        value:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        max_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        min_order_value:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        valid_from:
          type: string
          format: date-time
        valid_to:
          type: string
          format: date-time
        is_active:
          type: boolean
        max_use:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        used_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedDelivery:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        provider:
          $ref: '#/components/schemas/Provider05eEnum'
        tracking_id:
          type: string
          nullable: true
          maxLength: 100
        tracking_website:
          type: string
          format: uri
          maxLength: 200
        shipping_label:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        status:
          $ref: '#/components/schemas/Status842Enum'
        estimated_delivery_date:
          type: string
          format: date-time
          nullable: true
        confirmed_at:
          type: string
          format: date
          nullable: true
        order:
          type: string
          format: uuid
          nullable: true
    PatchedDispute:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
          readOnly: true
        order:
          type: string
          format: uuid
        content:
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/DisputeStatusEnum'
          readOnly: true
        result:
          type: string
          readOnly: true
          nullable: true
        multimedia:
          type: array
          items:
            $ref: '#/components/schemas/DisputeMedia'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedDisputeMedia:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        dispute:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/Type34bEnum'
        url:
          type: string
          format: uri
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedOrder:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        buyer:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        seller:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        base_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        convenience_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        delivery_fee:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        discount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        total_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          allOf:
          - $ref: '#/components/schemas/OrderStatusEnum'
          readOnly: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        coupons:
          allOf:
          - $ref: '#/components/schemas/Coupon'
          readOnly: true
        coupons_id:
          type: string
          format: uuid
          writeOnly: true
          nullable: true
        invoice:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        order_items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          writeOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 200
        desp:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        is_archived:
          type: boolean
        category:
          type: string
          format: uuid
          nullable: true
        brand:
          type: string
          format: uuid
          nullable: true
        size:
          type: string
          format: uuid
          nullable: true
        owner:
          type: string
          format: uuid
          readOnly: true
    PatchedReview:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          type: string
          format: uuid
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        content:
          type: string
        multimedia:
          type: array
          items:
            $ref: '#/components/schemas/ReviewMedia'
          readOnly: true
        user_name:
          type: string
          readOnly: true
        product_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedReviewMedia:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        review:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/Type34bEnum'
        url:
          type: string
          format: uri
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedSize:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        brand:
          type: string
          format: uuid
        category:
          type: string
          format: uuid
        brand_name:
          type: string
          readOnly: true
        category_name:
          type: string
          readOnly: true
        category_slug:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTransaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        order:
          type: string
          format: uuid
          nullable: true
        order_id:
          type: string
          format: uuid
          readOnly: true
        provider:
          $ref: '#/components/schemas/TransactionProviderEnum'
        provider_trxn_id:
          type: string
          maxLength: 100
        status:
          $ref: '#/components/schemas/TransactionStatusEnum'
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        confirmed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 200
        desp:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        is_archived:
          type: boolean
        category:
          type: string
          format: uuid
          nullable: true
        brand:
          type: string
          format: uuid
          nullable: true
        size:
          type: string
          format: uuid
          nullable: true
        owner:
          type: string
          format: uuid
          readOnly: true
      required:
      - created_at
      - desp
      - id
      - name
      - owner
      - price
      - stock
      - updated_at
    ProductDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        brand:
          $ref: '#/components/schemas/BrandList'
        category:
          $ref: '#/components/schemas/CategoryList'
        size:
          $ref: '#/components/schemas/Size'
        owner:
          $ref: '#/components/schemas/UserProfile'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 200
        desp:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        is_archived:
          type: boolean
      required:
      - brand
      - category
      - created_at
      - desp
      - id
      - name
      - owner
      - price
      - size
      - stock
      - updated_at
    ProductList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 200
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        stock:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        brand:
          $ref: '#/components/schemas/BrandList'
        category:
          $ref: '#/components/schemas/CategoryList'
        size:
          $ref: '#/components/schemas/Size'
        is_archived:
          type: boolean
        owner:
          $ref: '#/components/schemas/UserProfile'
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - brand
      - category
      - created_at
      - id
      - name
      - owner
      - price
      - size
      - stock
    Provider05eEnum:
      enum:
      - delhivery
      - xpressbees
      type: string
      description: |-
        * `delhivery` - Delhivery
        * `xpressbees` - Xpressbees
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          type: string
          format: uuid
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        content:
          type: string
        multimedia:
          type: array
          items:
            $ref: '#/components/schemas/ReviewMedia'
          readOnly: true
        user_name:
          type: string
          readOnly: true
        product_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created_at
      - id
      - multimedia
      - product
      - product_name
      - rating
      - updated_at
      - user_name
    ReviewMedia:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        review:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/Type34bEnum'
        url:
          type: string
          format: uri
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - review
      - updated_at
      - url
    RoleEnum:
      enum:
      - buyer
      - seller
      - admin
      - superadmin
      type: string
      description: |-
        * `buyer` - Buyer
        * `seller` - Seller
        * `admin` - Admin
        * `superadmin` - Superadmin
    Size:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        brand:
          type: string
          format: uuid
        category:
          type: string
          format: uuid
        brand_name:
          type: string
          readOnly: true
        category_name:
          type: string
          readOnly: true
        category_slug:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - brand
      - brand_name
      - category
      - category_name
      - category_slug
      - created_at
      - id
      - name
      - updated_at
    SizeDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        brand:
          allOf:
          - $ref: '#/components/schemas/BrandList'
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryList'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - brand
      - category
      - created_at
      - id
      - name
      - updated_at
    SizeList:
      type: object
      description: Simplified serializer for listing sizes
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        brand_name:
          type: string
          readOnly: true
        category_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - brand_name
      - category_name
      - created_at
      - id
      - name
      - updated_at
    Status842Enum:
      enum:
      - pickup_scheduled
      - picked_up
      - in_transit
      - delivered
      - cancelled
      type: string
      description: |-
        * `pickup_scheduled` - Pickup Scheduled
        * `picked_up` - Picked Up
        * `in_transit` - In Transit
        * `delivered` - Delivered
        * `cancelled` - Cancelled
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        order:
          type: string
          format: uuid
          nullable: true
        order_id:
          type: string
          format: uuid
          readOnly: true
        provider:
          $ref: '#/components/schemas/TransactionProviderEnum'
        provider_trxn_id:
          type: string
          maxLength: 100
        status:
          $ref: '#/components/schemas/TransactionStatusEnum'
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        confirmed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - id
      - order_id
      - provider_trxn_id
      - updated_at
    TransactionProviderEnum:
      enum:
      - razorpay
      - stripe
      type: string
      description: |-
        * `razorpay` - Razorpay
        * `stripe` - Stripe
    TransactionStatusEnum:
      enum:
      - pending
      - success
      - failed
      - cancelled
      type: string
      description: |-
        * `pending` - Pending
        * `success` - Success
        * `failed` - Failed
        * `cancelled` - Cancelled
    Type34bEnum:
      enum:
      - image
      - video
      type: string
      description: |-
        * `image` - Image
        * `video` - Video
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        password:
          type: string
          maxLength: 128
        last_login:
          type: string
          format: date-time
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        fullname:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        phoneNo:
          type: string
          nullable: true
          maxLength: 10
        profilePic:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        is_active:
          type: boolean
        is_staff:
          type: boolean
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - created_at
      - email
      - fullname
      - id
      - password
      - updated_at
    UserRegistration:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        fullname:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
        password2:
          type: string
          writeOnly: true
          title: Confirm Password
          minLength: 8
      required:
      - email
      - fullname
      - id
      - password
      - password2
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
